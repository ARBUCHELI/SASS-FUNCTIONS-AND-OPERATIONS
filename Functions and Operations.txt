# FUNCTIONS AND OPERATIONS
--------------------------
npm install -g sass

sass main.scss main.css

* Functions in SCSS
-------------------
Functions and operations in Sass allow for computing and iterating on styles.

With Sass functions you can:

	. Operate on color values

	. Iterate on lists and maps

	. Apply styles based on conditions

	. Assign values that result from math operations

This lesson will focus on unlocking their power!

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Arithmetic and Color
----------------------
As mentioned, Sass specifically comes equipped with functions that make working with colors easier.

The alpha parameter in a color like RGBA or HSLA is a mask denoting opacity. It specifies how one color should be merged with another when the two are on top of each other.

	. In Sass, the function fade-out makes a color more transparent by taking a number between 0 and 1 and decreasing opacity, or the alpha channel, by that amount:

   $color: rgba(39, 39, 39, 0.5);
   $amount: 0.1;
   $color2: fade-out($color, $amount);//rgba(39, 39, 39, 0.4) 

	. The fade-in color function changes a color by increasing its opacity:

$color: rgba(55,7,56, 0.5);
$amount: 0.1;
$color2: fade-in($color, $amount); //rgba(55,7,56, 0.6)

	. The function adjust-hue($color, $degrees) changes the hue of a color by taking color and a number of degrees (usually between -360 degrees and 360 degrees), and rotate the color 
	wheel by that amount.

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.scss, fade-out $lagoon-blue by 0.5:

$lagoon-blue: fade-out(#62fdca, 0.5);

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

Do you see how the blue is now a ligher shade? It’s 50% more “transparent”.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<div class="math">Styled with Math!</div>

main.scss
---------
$width: 250px;
$lagoon-blue: fade-out(#62fdca, 0.5);

.math {
  width: $width;
  text-align: center;
  background-color: $lagoon-blue;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Color Functions
-----------------
Sass also allows us to perform mathematical functions to compute measurements— including colors.

Here is how Sass computes colors:

	1. The operation is performed on the red, green, and blue components.

	2. It computes the answer by operating on every two digits.

$color: #010203 + #040506;

The above would compute piece-wise as follows:

01 + 04 = 05
02 + 05 = 07
03 + 06 = 09

and compile to:

color: #050709;

Sass arithmetic can also compute HSLA and string colors such as red and blue.

* Instructions
--------------
Checkpoint 1 Passed
1.
Try it. Add red and blue to make the font color of .math purple the following property:

color: red + blue;

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<div class="math">Styled with Math!</div>

main.scss
---------
$width: 250px;
$lagoon-blue: fade-out(#62fdca, 0.5);

.math {
  width: $width;
  text-align: center;
  background-color: $lagoon-blue;
  color: red + blue;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Arithmetic
------------
The Sass arithmetic operations are:

	1. addition +

	2. subtraction -

	3. multiplication *

	4. division /, and

	5. modulo %.

Note: Modulo, or %, is the remainder in a given division, so “9%2” would be “1”.

SCSS arithmetic requires that the units are compatible; for example, you can’t multiply pixels by ems.

Also, just like in regular math, multiplying two units together results in squared units:10px * 10px = 100px * px.

Since there is no such thing as squared units in CSS, the above would throw an error. You would need to multiply 10px * 10 in order to obtain 100px.

* Instructions
--------------
Checkpoint 1 Passed
1.
In main.scss inside of .math, include the following computations:

height: $width/6;
line-height: $width/6;

Click “Run” to see your changes in the browser and inspect them in the output of main.css.

Checkpoint 2 Passed
2.
In main.scss compute the border-radius property of the .math class to be a 1/30th of its width.

index.html
----------
<link rel="stylesheet" type="text/css" href="main.css">

<div class="math">Styled with Math!</div>

main.scss
---------
$width: 250px;
$lagoon-blue: fade-out(#62fdca, 0.5);

.math {
  width: $width;
  text-align: center;
  background-color: $lagoon-blue;
  color: red + blue;
  height: $width/6;
  line-height: $width/6;
  border-radius: $width/30;
}

------------------------------------------------------------------------------------------------------------------------------------------------------------------

























































































